// Overloads.generated.cs
//
// Generated File. DO NOT EDIT THIS FILE. Edit Overloads.tt to change the produced file.
//
// Licensed under the EUPL, Version 1.1 only (the “Licence”).
// You may not use, modify or distribute this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// <http://joinup.ec.europa.eu/software/page/eupl/licence-eupl>
// A copy is also distributed with this source code.
// Unless required by applicable law or agreed to in writing, software distributed under the
// Licence is distributed on an “AS IS” basis, without warranties or conditions of any kind.

using System;
using System.Collections.Generic;
using System.Linq;
using SpookilySharp;
using Xunit;

namespace SpookyHashTesting
{
	public sealed partial class HashUpdateTests
	{
        [Fact]
        public unsafe void UpdateWithSByte()
        {
            SByte val = (SByte)42;
            var sh = new SpookyHash();
            sh.Update(val);
            var h = sh.Final();
            sh = new SpookyHash();
            sh.Update(&val, sizeof(SByte));
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            for(int i = 0; i != 200; ++i)
                sh.Update((SByte)i);
            h = sh.Final();
            sh = new SpookyHash();
            var arr = new SByte[200];
            for(int i = 0; i != 200; ++i)
                arr[i] = (SByte)i;
            sh.Update(arr);
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            sh.Update(arr, 0, 200);
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            sh.Update((IEnumerable<SByte>)arr);
            sh = new SpookyHash();
            sh.Update(arr.Select(i => i));
        }
        [Fact]
        public void NullSByteArrayUpdate()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentNullException>(() => hash.Update((SByte[])null));
        }

        [Fact]
        public void NullSByteArrayWithLength()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentNullException>(() => hash.Update((SByte[])null, 0, 0));
        }

        [Fact]
        public void NegativeOffestSByte()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new SByte[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffestSByte()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new SByte[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLengthSByte()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentException>(() => hash.Update(new SByte[]{default(SByte)}, 0, 2));
        }

        [Fact]
        public void NegativeLengthSByte()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new SByte[0], 0, -2));
        }
    }

    public sealed partial class HasherTests
    {
        [Fact]
        public void ArrayExtensionSByte()
        {
            var arr = new SByte[200];
            for(int i = 0; i != arr.Length; ++i)
                arr[i] = (SByte)i;
            var sh = new SpookyHash();
            sh.Update(arr);
            var h = sh.Final();
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr));
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr, 0, 200, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(h, unchecked(SpookyHasher.SpookyHash128(arr, 0, 200, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr, 0, 200));
            var hSlice = SpookyHasher.SpookyHash128(arr, 50, 100, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF);
            Assert.NotEqual(h, hSlice);
            Assert.Equal(hSlice, unchecked(SpookyHasher.SpookyHash128(arr, 50, 100, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            long lHash = SpookyHasher.SpookyHash64(arr, 0, 200, unchecked((long)0xDEADBEEFDEADBEEF));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr, 0, 200));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr));
            int hash = SpookyHasher.SpookyHash32(arr, 0, 200, unchecked((int)0xDEADBEEF));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr, unchecked((int)0xDEADBEEF)));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr, 0, 200));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr));
            arr = null;
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 0, 200, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(HashCode128.Zero, unchecked(SpookyHasher.SpookyHash128(arr, 0, 200, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 0, 200));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 50, 100, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, 0, 200, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, 0, 200));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, 0, 200, unchecked((int)0xDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, unchecked((int)0xDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, 0, 200));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr));
        }
        
        [Fact]
        public void NegativeOffest32SByte()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new SByte[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest32SByte()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new SByte[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength32SByte()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash32(new SByte[]{default(SByte)}, 0, 2));
        }

        [Fact]
        public void NegativeLength32SByte()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new SByte[0], 0, -2));
        }
        
        [Fact]
        public void NegativeOffest64SByte()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new SByte[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest64SByte()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new SByte[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength64SByte()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash64(new SByte[]{default(SByte)}, 0, 2));
        }

        [Fact]
        public void NegativeLength64SByte()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new SByte[0], 0, -2));
        }
        
        [Fact]
        public void NegativeOffest128SByte()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new SByte[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest128SByte()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new SByte[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength128SByte()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash128(new SByte[]{default(SByte)}, 0, 2));
        }

        [Fact]
        public void NegativeLength128SByte()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new SByte[0], 0, -2));
        }
            }
	public sealed partial class HashUpdateTests
	{
        [Fact]
        public unsafe void UpdateWithUInt16()
        {
            UInt16 val = (UInt16)42;
            var sh = new SpookyHash();
            sh.Update(val);
            var h = sh.Final();
            sh = new SpookyHash();
            sh.Update(&val, sizeof(UInt16));
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            for(int i = 0; i != 200; ++i)
                sh.Update((UInt16)i);
            h = sh.Final();
            sh = new SpookyHash();
            var arr = new UInt16[200];
            for(int i = 0; i != 200; ++i)
                arr[i] = (UInt16)i;
            sh.Update(arr);
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            sh.Update(arr, 0, 200);
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            sh.Update((IEnumerable<UInt16>)arr);
            sh = new SpookyHash();
            sh.Update(arr.Select(i => i));
        }
        [Fact]
        public void NullUInt16ArrayUpdate()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentNullException>(() => hash.Update((UInt16[])null));
        }

        [Fact]
        public void NullUInt16ArrayWithLength()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentNullException>(() => hash.Update((UInt16[])null, 0, 0));
        }

        [Fact]
        public void NegativeOffestUInt16()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new UInt16[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffestUInt16()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new UInt16[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLengthUInt16()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentException>(() => hash.Update(new UInt16[]{default(UInt16)}, 0, 2));
        }

        [Fact]
        public void NegativeLengthUInt16()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new UInt16[0], 0, -2));
        }
    }

    public sealed partial class HasherTests
    {
        [Fact]
        public void ArrayExtensionUInt16()
        {
            var arr = new UInt16[200];
            for(int i = 0; i != arr.Length; ++i)
                arr[i] = (UInt16)i;
            var sh = new SpookyHash();
            sh.Update(arr);
            var h = sh.Final();
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr));
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr, 0, 200, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(h, unchecked(SpookyHasher.SpookyHash128(arr, 0, 200, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr, 0, 200));
            var hSlice = SpookyHasher.SpookyHash128(arr, 50, 100, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF);
            Assert.NotEqual(h, hSlice);
            Assert.Equal(hSlice, unchecked(SpookyHasher.SpookyHash128(arr, 50, 100, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            long lHash = SpookyHasher.SpookyHash64(arr, 0, 200, unchecked((long)0xDEADBEEFDEADBEEF));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr, 0, 200));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr));
            int hash = SpookyHasher.SpookyHash32(arr, 0, 200, unchecked((int)0xDEADBEEF));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr, unchecked((int)0xDEADBEEF)));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr, 0, 200));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr));
            arr = null;
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 0, 200, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(HashCode128.Zero, unchecked(SpookyHasher.SpookyHash128(arr, 0, 200, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 0, 200));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 50, 100, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, 0, 200, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, 0, 200));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, 0, 200, unchecked((int)0xDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, unchecked((int)0xDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, 0, 200));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr));
        }
        
        [Fact]
        public void NegativeOffest32UInt16()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new UInt16[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest32UInt16()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new UInt16[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength32UInt16()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash32(new UInt16[]{default(UInt16)}, 0, 2));
        }

        [Fact]
        public void NegativeLength32UInt16()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new UInt16[0], 0, -2));
        }
        
        [Fact]
        public void NegativeOffest64UInt16()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new UInt16[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest64UInt16()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new UInt16[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength64UInt16()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash64(new UInt16[]{default(UInt16)}, 0, 2));
        }

        [Fact]
        public void NegativeLength64UInt16()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new UInt16[0], 0, -2));
        }
        
        [Fact]
        public void NegativeOffest128UInt16()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new UInt16[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest128UInt16()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new UInt16[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength128UInt16()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash128(new UInt16[]{default(UInt16)}, 0, 2));
        }

        [Fact]
        public void NegativeLength128UInt16()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new UInt16[0], 0, -2));
        }
            }
	public sealed partial class HashUpdateTests
	{
        [Fact]
        public unsafe void UpdateWithUInt32()
        {
            UInt32 val = (UInt32)42;
            var sh = new SpookyHash();
            sh.Update(val);
            var h = sh.Final();
            sh = new SpookyHash();
            sh.Update(&val, sizeof(UInt32));
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            for(int i = 0; i != 200; ++i)
                sh.Update((UInt32)i);
            h = sh.Final();
            sh = new SpookyHash();
            var arr = new UInt32[200];
            for(int i = 0; i != 200; ++i)
                arr[i] = (UInt32)i;
            sh.Update(arr);
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            sh.Update(arr, 0, 200);
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            sh.Update((IEnumerable<UInt32>)arr);
            sh = new SpookyHash();
            sh.Update(arr.Select(i => i));
        }
        [Fact]
        public void NullUInt32ArrayUpdate()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentNullException>(() => hash.Update((UInt32[])null));
        }

        [Fact]
        public void NullUInt32ArrayWithLength()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentNullException>(() => hash.Update((UInt32[])null, 0, 0));
        }

        [Fact]
        public void NegativeOffestUInt32()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new UInt32[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffestUInt32()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new UInt32[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLengthUInt32()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentException>(() => hash.Update(new UInt32[]{default(UInt32)}, 0, 2));
        }

        [Fact]
        public void NegativeLengthUInt32()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new UInt32[0], 0, -2));
        }
    }

    public sealed partial class HasherTests
    {
        [Fact]
        public void ArrayExtensionUInt32()
        {
            var arr = new UInt32[200];
            for(int i = 0; i != arr.Length; ++i)
                arr[i] = (UInt32)i;
            var sh = new SpookyHash();
            sh.Update(arr);
            var h = sh.Final();
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr));
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr, 0, 200, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(h, unchecked(SpookyHasher.SpookyHash128(arr, 0, 200, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr, 0, 200));
            var hSlice = SpookyHasher.SpookyHash128(arr, 50, 100, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF);
            Assert.NotEqual(h, hSlice);
            Assert.Equal(hSlice, unchecked(SpookyHasher.SpookyHash128(arr, 50, 100, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            long lHash = SpookyHasher.SpookyHash64(arr, 0, 200, unchecked((long)0xDEADBEEFDEADBEEF));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr, 0, 200));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr));
            int hash = SpookyHasher.SpookyHash32(arr, 0, 200, unchecked((int)0xDEADBEEF));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr, unchecked((int)0xDEADBEEF)));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr, 0, 200));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr));
            arr = null;
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 0, 200, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(HashCode128.Zero, unchecked(SpookyHasher.SpookyHash128(arr, 0, 200, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 0, 200));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 50, 100, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, 0, 200, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, 0, 200));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, 0, 200, unchecked((int)0xDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, unchecked((int)0xDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, 0, 200));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr));
        }
        
        [Fact]
        public void NegativeOffest32UInt32()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new UInt32[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest32UInt32()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new UInt32[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength32UInt32()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash32(new UInt32[]{default(UInt32)}, 0, 2));
        }

        [Fact]
        public void NegativeLength32UInt32()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new UInt32[0], 0, -2));
        }
        
        [Fact]
        public void NegativeOffest64UInt32()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new UInt32[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest64UInt32()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new UInt32[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength64UInt32()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash64(new UInt32[]{default(UInt32)}, 0, 2));
        }

        [Fact]
        public void NegativeLength64UInt32()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new UInt32[0], 0, -2));
        }
        
        [Fact]
        public void NegativeOffest128UInt32()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new UInt32[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest128UInt32()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new UInt32[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength128UInt32()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash128(new UInt32[]{default(UInt32)}, 0, 2));
        }

        [Fact]
        public void NegativeLength128UInt32()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new UInt32[0], 0, -2));
        }
            }
	public sealed partial class HashUpdateTests
	{
        [Fact]
        public unsafe void UpdateWithUInt64()
        {
            UInt64 val = (UInt64)42;
            var sh = new SpookyHash();
            sh.Update(val);
            var h = sh.Final();
            sh = new SpookyHash();
            sh.Update(&val, sizeof(UInt64));
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            for(int i = 0; i != 200; ++i)
                sh.Update((UInt64)i);
            h = sh.Final();
            sh = new SpookyHash();
            var arr = new UInt64[200];
            for(int i = 0; i != 200; ++i)
                arr[i] = (UInt64)i;
            sh.Update(arr);
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            sh.Update(arr, 0, 200);
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            sh.Update((IEnumerable<UInt64>)arr);
            sh = new SpookyHash();
            sh.Update(arr.Select(i => i));
        }
        [Fact]
        public void NullUInt64ArrayUpdate()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentNullException>(() => hash.Update((UInt64[])null));
        }

        [Fact]
        public void NullUInt64ArrayWithLength()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentNullException>(() => hash.Update((UInt64[])null, 0, 0));
        }

        [Fact]
        public void NegativeOffestUInt64()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new UInt64[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffestUInt64()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new UInt64[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLengthUInt64()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentException>(() => hash.Update(new UInt64[]{default(UInt64)}, 0, 2));
        }

        [Fact]
        public void NegativeLengthUInt64()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new UInt64[0], 0, -2));
        }
    }

    public sealed partial class HasherTests
    {
        [Fact]
        public void ArrayExtensionUInt64()
        {
            var arr = new UInt64[200];
            for(int i = 0; i != arr.Length; ++i)
                arr[i] = (UInt64)i;
            var sh = new SpookyHash();
            sh.Update(arr);
            var h = sh.Final();
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr));
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr, 0, 200, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(h, unchecked(SpookyHasher.SpookyHash128(arr, 0, 200, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr, 0, 200));
            var hSlice = SpookyHasher.SpookyHash128(arr, 50, 100, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF);
            Assert.NotEqual(h, hSlice);
            Assert.Equal(hSlice, unchecked(SpookyHasher.SpookyHash128(arr, 50, 100, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            long lHash = SpookyHasher.SpookyHash64(arr, 0, 200, unchecked((long)0xDEADBEEFDEADBEEF));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr, 0, 200));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr));
            int hash = SpookyHasher.SpookyHash32(arr, 0, 200, unchecked((int)0xDEADBEEF));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr, unchecked((int)0xDEADBEEF)));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr, 0, 200));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr));
            arr = null;
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 0, 200, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(HashCode128.Zero, unchecked(SpookyHasher.SpookyHash128(arr, 0, 200, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 0, 200));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 50, 100, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, 0, 200, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, 0, 200));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, 0, 200, unchecked((int)0xDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, unchecked((int)0xDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, 0, 200));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr));
        }
        
        [Fact]
        public void NegativeOffest32UInt64()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new UInt64[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest32UInt64()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new UInt64[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength32UInt64()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash32(new UInt64[]{default(UInt64)}, 0, 2));
        }

        [Fact]
        public void NegativeLength32UInt64()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new UInt64[0], 0, -2));
        }
        
        [Fact]
        public void NegativeOffest64UInt64()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new UInt64[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest64UInt64()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new UInt64[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength64UInt64()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash64(new UInt64[]{default(UInt64)}, 0, 2));
        }

        [Fact]
        public void NegativeLength64UInt64()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new UInt64[0], 0, -2));
        }
        
        [Fact]
        public void NegativeOffest128UInt64()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new UInt64[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest128UInt64()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new UInt64[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength128UInt64()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash128(new UInt64[]{default(UInt64)}, 0, 2));
        }

        [Fact]
        public void NegativeLength128UInt64()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new UInt64[0], 0, -2));
        }
            }
	public sealed partial class HashUpdateTests
	{
        [Fact]
        public unsafe void UpdateWithByte()
        {
            Byte val = (Byte)42;
            var sh = new SpookyHash();
            sh.Update(val);
            var h = sh.Final();
            sh = new SpookyHash();
            sh.Update(&val, sizeof(Byte));
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            for(int i = 0; i != 200; ++i)
                sh.Update((Byte)i);
            h = sh.Final();
            sh = new SpookyHash();
            var arr = new Byte[200];
            for(int i = 0; i != 200; ++i)
                arr[i] = (Byte)i;
            sh.Update(arr);
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            sh.Update(arr, 0, 200);
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            sh.Update((IEnumerable<Byte>)arr);
            sh = new SpookyHash();
            sh.Update(arr.Select(i => i));
        }
        [Fact]
        public void NullByteArrayUpdate()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentNullException>(() => hash.Update((Byte[])null));
        }

        [Fact]
        public void NullByteArrayWithLength()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentNullException>(() => hash.Update((Byte[])null, 0, 0));
        }

        [Fact]
        public void NegativeOffestByte()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new Byte[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffestByte()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new Byte[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLengthByte()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentException>(() => hash.Update(new Byte[]{default(Byte)}, 0, 2));
        }

        [Fact]
        public void NegativeLengthByte()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new Byte[0], 0, -2));
        }
    }

    public sealed partial class HasherTests
    {
        [Fact]
        public void ArrayExtensionByte()
        {
            var arr = new Byte[200];
            for(int i = 0; i != arr.Length; ++i)
                arr[i] = (Byte)i;
            var sh = new SpookyHash();
            sh.Update(arr);
            var h = sh.Final();
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr));
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr, 0, 200, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(h, unchecked(SpookyHasher.SpookyHash128(arr, 0, 200, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr, 0, 200));
            var hSlice = SpookyHasher.SpookyHash128(arr, 50, 100, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF);
            Assert.NotEqual(h, hSlice);
            Assert.Equal(hSlice, unchecked(SpookyHasher.SpookyHash128(arr, 50, 100, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            long lHash = SpookyHasher.SpookyHash64(arr, 0, 200, unchecked((long)0xDEADBEEFDEADBEEF));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr, 0, 200));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr));
            int hash = SpookyHasher.SpookyHash32(arr, 0, 200, unchecked((int)0xDEADBEEF));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr, unchecked((int)0xDEADBEEF)));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr, 0, 200));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr));
            arr = null;
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 0, 200, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(HashCode128.Zero, unchecked(SpookyHasher.SpookyHash128(arr, 0, 200, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 0, 200));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 50, 100, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, 0, 200, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, 0, 200));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, 0, 200, unchecked((int)0xDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, unchecked((int)0xDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, 0, 200));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr));
        }
        
        [Fact]
        public void NegativeOffest32Byte()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new Byte[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest32Byte()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new Byte[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength32Byte()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash32(new Byte[]{default(Byte)}, 0, 2));
        }

        [Fact]
        public void NegativeLength32Byte()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new Byte[0], 0, -2));
        }
        
        [Fact]
        public void NegativeOffest64Byte()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new Byte[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest64Byte()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new Byte[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength64Byte()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash64(new Byte[]{default(Byte)}, 0, 2));
        }

        [Fact]
        public void NegativeLength64Byte()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new Byte[0], 0, -2));
        }
        
        [Fact]
        public void NegativeOffest128Byte()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new Byte[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest128Byte()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new Byte[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength128Byte()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash128(new Byte[]{default(Byte)}, 0, 2));
        }

        [Fact]
        public void NegativeLength128Byte()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new Byte[0], 0, -2));
        }
            }
	public sealed partial class HashUpdateTests
	{
        [Fact]
        public unsafe void UpdateWithChar()
        {
            Char val = (Char)42;
            var sh = new SpookyHash();
            sh.Update(val);
            var h = sh.Final();
            sh = new SpookyHash();
            sh.Update(&val, sizeof(Char));
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            for(int i = 0; i != 200; ++i)
                sh.Update((Char)i);
            h = sh.Final();
            sh = new SpookyHash();
            var arr = new Char[200];
            for(int i = 0; i != 200; ++i)
                arr[i] = (Char)i;
            sh.Update(arr);
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            sh.Update(arr, 0, 200);
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            sh.Update((IEnumerable<Char>)arr);
            sh = new SpookyHash();
            sh.Update(arr.Select(i => i));
        }
        [Fact]
        public void NullCharArrayUpdate()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentNullException>(() => hash.Update((Char[])null));
        }

        [Fact]
        public void NullCharArrayWithLength()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentNullException>(() => hash.Update((Char[])null, 0, 0));
        }

        [Fact]
        public void NegativeOffestChar()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new Char[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffestChar()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new Char[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLengthChar()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentException>(() => hash.Update(new Char[]{default(Char)}, 0, 2));
        }

        [Fact]
        public void NegativeLengthChar()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new Char[0], 0, -2));
        }
    }

    public sealed partial class HasherTests
    {
        [Fact]
        public void ArrayExtensionChar()
        {
            var arr = new Char[200];
            for(int i = 0; i != arr.Length; ++i)
                arr[i] = (Char)i;
            var sh = new SpookyHash();
            sh.Update(arr);
            var h = sh.Final();
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr));
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr, 0, 200, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(h, unchecked(SpookyHasher.SpookyHash128(arr, 0, 200, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr, 0, 200));
            var hSlice = SpookyHasher.SpookyHash128(arr, 50, 100, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF);
            Assert.NotEqual(h, hSlice);
            Assert.Equal(hSlice, unchecked(SpookyHasher.SpookyHash128(arr, 50, 100, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            long lHash = SpookyHasher.SpookyHash64(arr, 0, 200, unchecked((long)0xDEADBEEFDEADBEEF));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr, 0, 200));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr));
            int hash = SpookyHasher.SpookyHash32(arr, 0, 200, unchecked((int)0xDEADBEEF));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr, unchecked((int)0xDEADBEEF)));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr, 0, 200));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr));
            arr = null;
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 0, 200, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(HashCode128.Zero, unchecked(SpookyHasher.SpookyHash128(arr, 0, 200, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 0, 200));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 50, 100, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, 0, 200, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, 0, 200));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, 0, 200, unchecked((int)0xDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, unchecked((int)0xDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, 0, 200));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr));
        }
        
        [Fact]
        public void NegativeOffest32Char()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new Char[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest32Char()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new Char[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength32Char()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash32(new Char[]{default(Char)}, 0, 2));
        }

        [Fact]
        public void NegativeLength32Char()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new Char[0], 0, -2));
        }
        
        [Fact]
        public void NegativeOffest64Char()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new Char[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest64Char()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new Char[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength64Char()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash64(new Char[]{default(Char)}, 0, 2));
        }

        [Fact]
        public void NegativeLength64Char()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new Char[0], 0, -2));
        }
        
        [Fact]
        public void NegativeOffest128Char()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new Char[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest128Char()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new Char[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength128Char()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash128(new Char[]{default(Char)}, 0, 2));
        }

        [Fact]
        public void NegativeLength128Char()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new Char[0], 0, -2));
        }
            }
	public sealed partial class HashUpdateTests
	{
        [Fact]
        public unsafe void UpdateWithInt16()
        {
            Int16 val = (Int16)42;
            var sh = new SpookyHash();
            sh.Update(val);
            var h = sh.Final();
            sh = new SpookyHash();
            sh.Update(&val, sizeof(Int16));
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            for(int i = 0; i != 200; ++i)
                sh.Update((Int16)i);
            h = sh.Final();
            sh = new SpookyHash();
            var arr = new Int16[200];
            for(int i = 0; i != 200; ++i)
                arr[i] = (Int16)i;
            sh.Update(arr);
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            sh.Update(arr, 0, 200);
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            sh.Update((IEnumerable<Int16>)arr);
            sh = new SpookyHash();
            sh.Update(arr.Select(i => i));
        }
        [Fact]
        public void NullInt16ArrayUpdate()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentNullException>(() => hash.Update((Int16[])null));
        }

        [Fact]
        public void NullInt16ArrayWithLength()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentNullException>(() => hash.Update((Int16[])null, 0, 0));
        }

        [Fact]
        public void NegativeOffestInt16()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new Int16[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffestInt16()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new Int16[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLengthInt16()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentException>(() => hash.Update(new Int16[]{default(Int16)}, 0, 2));
        }

        [Fact]
        public void NegativeLengthInt16()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new Int16[0], 0, -2));
        }
    }

    public sealed partial class HasherTests
    {
        [Fact]
        public void ArrayExtensionInt16()
        {
            var arr = new Int16[200];
            for(int i = 0; i != arr.Length; ++i)
                arr[i] = (Int16)i;
            var sh = new SpookyHash();
            sh.Update(arr);
            var h = sh.Final();
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr));
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr, 0, 200, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(h, unchecked(SpookyHasher.SpookyHash128(arr, 0, 200, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr, 0, 200));
            var hSlice = SpookyHasher.SpookyHash128(arr, 50, 100, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF);
            Assert.NotEqual(h, hSlice);
            Assert.Equal(hSlice, unchecked(SpookyHasher.SpookyHash128(arr, 50, 100, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            long lHash = SpookyHasher.SpookyHash64(arr, 0, 200, unchecked((long)0xDEADBEEFDEADBEEF));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr, 0, 200));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr));
            int hash = SpookyHasher.SpookyHash32(arr, 0, 200, unchecked((int)0xDEADBEEF));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr, unchecked((int)0xDEADBEEF)));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr, 0, 200));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr));
            arr = null;
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 0, 200, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(HashCode128.Zero, unchecked(SpookyHasher.SpookyHash128(arr, 0, 200, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 0, 200));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 50, 100, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, 0, 200, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, 0, 200));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, 0, 200, unchecked((int)0xDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, unchecked((int)0xDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, 0, 200));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr));
        }
        
        [Fact]
        public void NegativeOffest32Int16()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new Int16[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest32Int16()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new Int16[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength32Int16()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash32(new Int16[]{default(Int16)}, 0, 2));
        }

        [Fact]
        public void NegativeLength32Int16()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new Int16[0], 0, -2));
        }
        
        [Fact]
        public void NegativeOffest64Int16()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new Int16[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest64Int16()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new Int16[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength64Int16()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash64(new Int16[]{default(Int16)}, 0, 2));
        }

        [Fact]
        public void NegativeLength64Int16()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new Int16[0], 0, -2));
        }
        
        [Fact]
        public void NegativeOffest128Int16()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new Int16[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest128Int16()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new Int16[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength128Int16()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash128(new Int16[]{default(Int16)}, 0, 2));
        }

        [Fact]
        public void NegativeLength128Int16()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new Int16[0], 0, -2));
        }
            }
	public sealed partial class HashUpdateTests
	{
        [Fact]
        public unsafe void UpdateWithInt32()
        {
            Int32 val = (Int32)42;
            var sh = new SpookyHash();
            sh.Update(val);
            var h = sh.Final();
            sh = new SpookyHash();
            sh.Update(&val, sizeof(Int32));
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            for(int i = 0; i != 200; ++i)
                sh.Update((Int32)i);
            h = sh.Final();
            sh = new SpookyHash();
            var arr = new Int32[200];
            for(int i = 0; i != 200; ++i)
                arr[i] = (Int32)i;
            sh.Update(arr);
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            sh.Update(arr, 0, 200);
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            sh.Update((IEnumerable<Int32>)arr);
            sh = new SpookyHash();
            sh.Update(arr.Select(i => i));
        }
        [Fact]
        public void NullInt32ArrayUpdate()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentNullException>(() => hash.Update((Int32[])null));
        }

        [Fact]
        public void NullInt32ArrayWithLength()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentNullException>(() => hash.Update((Int32[])null, 0, 0));
        }

        [Fact]
        public void NegativeOffestInt32()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new Int32[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffestInt32()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new Int32[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLengthInt32()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentException>(() => hash.Update(new Int32[]{default(Int32)}, 0, 2));
        }

        [Fact]
        public void NegativeLengthInt32()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new Int32[0], 0, -2));
        }
    }

    public sealed partial class HasherTests
    {
        [Fact]
        public void ArrayExtensionInt32()
        {
            var arr = new Int32[200];
            for(int i = 0; i != arr.Length; ++i)
                arr[i] = (Int32)i;
            var sh = new SpookyHash();
            sh.Update(arr);
            var h = sh.Final();
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr));
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr, 0, 200, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(h, unchecked(SpookyHasher.SpookyHash128(arr, 0, 200, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr, 0, 200));
            var hSlice = SpookyHasher.SpookyHash128(arr, 50, 100, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF);
            Assert.NotEqual(h, hSlice);
            Assert.Equal(hSlice, unchecked(SpookyHasher.SpookyHash128(arr, 50, 100, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            long lHash = SpookyHasher.SpookyHash64(arr, 0, 200, unchecked((long)0xDEADBEEFDEADBEEF));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr, 0, 200));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr));
            int hash = SpookyHasher.SpookyHash32(arr, 0, 200, unchecked((int)0xDEADBEEF));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr, unchecked((int)0xDEADBEEF)));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr, 0, 200));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr));
            arr = null;
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 0, 200, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(HashCode128.Zero, unchecked(SpookyHasher.SpookyHash128(arr, 0, 200, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 0, 200));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 50, 100, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, 0, 200, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, 0, 200));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, 0, 200, unchecked((int)0xDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, unchecked((int)0xDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, 0, 200));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr));
        }
        
        [Fact]
        public void NegativeOffest32Int32()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new Int32[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest32Int32()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new Int32[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength32Int32()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash32(new Int32[]{default(Int32)}, 0, 2));
        }

        [Fact]
        public void NegativeLength32Int32()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new Int32[0], 0, -2));
        }
        
        [Fact]
        public void NegativeOffest64Int32()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new Int32[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest64Int32()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new Int32[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength64Int32()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash64(new Int32[]{default(Int32)}, 0, 2));
        }

        [Fact]
        public void NegativeLength64Int32()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new Int32[0], 0, -2));
        }
        
        [Fact]
        public void NegativeOffest128Int32()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new Int32[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest128Int32()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new Int32[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength128Int32()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash128(new Int32[]{default(Int32)}, 0, 2));
        }

        [Fact]
        public void NegativeLength128Int32()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new Int32[0], 0, -2));
        }
            }
	public sealed partial class HashUpdateTests
	{
        [Fact]
        public unsafe void UpdateWithInt64()
        {
            Int64 val = (Int64)42;
            var sh = new SpookyHash();
            sh.Update(val);
            var h = sh.Final();
            sh = new SpookyHash();
            sh.Update(&val, sizeof(Int64));
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            for(int i = 0; i != 200; ++i)
                sh.Update((Int64)i);
            h = sh.Final();
            sh = new SpookyHash();
            var arr = new Int64[200];
            for(int i = 0; i != 200; ++i)
                arr[i] = (Int64)i;
            sh.Update(arr);
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            sh.Update(arr, 0, 200);
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            sh.Update((IEnumerable<Int64>)arr);
            sh = new SpookyHash();
            sh.Update(arr.Select(i => i));
        }
        [Fact]
        public void NullInt64ArrayUpdate()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentNullException>(() => hash.Update((Int64[])null));
        }

        [Fact]
        public void NullInt64ArrayWithLength()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentNullException>(() => hash.Update((Int64[])null, 0, 0));
        }

        [Fact]
        public void NegativeOffestInt64()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new Int64[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffestInt64()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new Int64[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLengthInt64()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentException>(() => hash.Update(new Int64[]{default(Int64)}, 0, 2));
        }

        [Fact]
        public void NegativeLengthInt64()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new Int64[0], 0, -2));
        }
    }

    public sealed partial class HasherTests
    {
        [Fact]
        public void ArrayExtensionInt64()
        {
            var arr = new Int64[200];
            for(int i = 0; i != arr.Length; ++i)
                arr[i] = (Int64)i;
            var sh = new SpookyHash();
            sh.Update(arr);
            var h = sh.Final();
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr));
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr, 0, 200, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(h, unchecked(SpookyHasher.SpookyHash128(arr, 0, 200, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr, 0, 200));
            var hSlice = SpookyHasher.SpookyHash128(arr, 50, 100, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF);
            Assert.NotEqual(h, hSlice);
            Assert.Equal(hSlice, unchecked(SpookyHasher.SpookyHash128(arr, 50, 100, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            long lHash = SpookyHasher.SpookyHash64(arr, 0, 200, unchecked((long)0xDEADBEEFDEADBEEF));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr, 0, 200));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr));
            int hash = SpookyHasher.SpookyHash32(arr, 0, 200, unchecked((int)0xDEADBEEF));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr, unchecked((int)0xDEADBEEF)));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr, 0, 200));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr));
            arr = null;
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 0, 200, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(HashCode128.Zero, unchecked(SpookyHasher.SpookyHash128(arr, 0, 200, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 0, 200));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 50, 100, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, 0, 200, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, 0, 200));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, 0, 200, unchecked((int)0xDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, unchecked((int)0xDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, 0, 200));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr));
        }
        
        [Fact]
        public void NegativeOffest32Int64()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new Int64[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest32Int64()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new Int64[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength32Int64()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash32(new Int64[]{default(Int64)}, 0, 2));
        }

        [Fact]
        public void NegativeLength32Int64()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new Int64[0], 0, -2));
        }
        
        [Fact]
        public void NegativeOffest64Int64()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new Int64[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest64Int64()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new Int64[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength64Int64()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash64(new Int64[]{default(Int64)}, 0, 2));
        }

        [Fact]
        public void NegativeLength64Int64()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new Int64[0], 0, -2));
        }
        
        [Fact]
        public void NegativeOffest128Int64()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new Int64[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest128Int64()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new Int64[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength128Int64()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash128(new Int64[]{default(Int64)}, 0, 2));
        }

        [Fact]
        public void NegativeLength128Int64()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new Int64[0], 0, -2));
        }
            }
	public sealed partial class HashUpdateTests
	{
        [Fact]
        public unsafe void UpdateWithSingle()
        {
            Single val = (Single)42;
            var sh = new SpookyHash();
            sh.Update(val);
            var h = sh.Final();
            sh = new SpookyHash();
            sh.Update(&val, sizeof(Single));
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            for(int i = 0; i != 200; ++i)
                sh.Update((Single)i);
            h = sh.Final();
            sh = new SpookyHash();
            var arr = new Single[200];
            for(int i = 0; i != 200; ++i)
                arr[i] = (Single)i;
            sh.Update(arr);
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            sh.Update(arr, 0, 200);
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            sh.Update((IEnumerable<Single>)arr);
            sh = new SpookyHash();
            sh.Update(arr.Select(i => i));
        }
        [Fact]
        public void NullSingleArrayUpdate()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentNullException>(() => hash.Update((Single[])null));
        }

        [Fact]
        public void NullSingleArrayWithLength()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentNullException>(() => hash.Update((Single[])null, 0, 0));
        }

        [Fact]
        public void NegativeOffestSingle()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new Single[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffestSingle()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new Single[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLengthSingle()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentException>(() => hash.Update(new Single[]{default(Single)}, 0, 2));
        }

        [Fact]
        public void NegativeLengthSingle()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new Single[0], 0, -2));
        }
    }

    public sealed partial class HasherTests
    {
        [Fact]
        public void ArrayExtensionSingle()
        {
            var arr = new Single[200];
            for(int i = 0; i != arr.Length; ++i)
                arr[i] = (Single)i;
            var sh = new SpookyHash();
            sh.Update(arr);
            var h = sh.Final();
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr));
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr, 0, 200, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(h, unchecked(SpookyHasher.SpookyHash128(arr, 0, 200, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr, 0, 200));
            var hSlice = SpookyHasher.SpookyHash128(arr, 50, 100, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF);
            Assert.NotEqual(h, hSlice);
            Assert.Equal(hSlice, unchecked(SpookyHasher.SpookyHash128(arr, 50, 100, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            long lHash = SpookyHasher.SpookyHash64(arr, 0, 200, unchecked((long)0xDEADBEEFDEADBEEF));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr, 0, 200));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr));
            int hash = SpookyHasher.SpookyHash32(arr, 0, 200, unchecked((int)0xDEADBEEF));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr, unchecked((int)0xDEADBEEF)));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr, 0, 200));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr));
            arr = null;
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 0, 200, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(HashCode128.Zero, unchecked(SpookyHasher.SpookyHash128(arr, 0, 200, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 0, 200));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 50, 100, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, 0, 200, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, 0, 200));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, 0, 200, unchecked((int)0xDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, unchecked((int)0xDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, 0, 200));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr));
        }
        
        [Fact]
        public void NegativeOffest32Single()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new Single[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest32Single()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new Single[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength32Single()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash32(new Single[]{default(Single)}, 0, 2));
        }

        [Fact]
        public void NegativeLength32Single()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new Single[0], 0, -2));
        }
        
        [Fact]
        public void NegativeOffest64Single()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new Single[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest64Single()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new Single[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength64Single()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash64(new Single[]{default(Single)}, 0, 2));
        }

        [Fact]
        public void NegativeLength64Single()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new Single[0], 0, -2));
        }
        
        [Fact]
        public void NegativeOffest128Single()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new Single[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest128Single()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new Single[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength128Single()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash128(new Single[]{default(Single)}, 0, 2));
        }

        [Fact]
        public void NegativeLength128Single()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new Single[0], 0, -2));
        }
            }
	public sealed partial class HashUpdateTests
	{
        [Fact]
        public unsafe void UpdateWithDouble()
        {
            Double val = (Double)42;
            var sh = new SpookyHash();
            sh.Update(val);
            var h = sh.Final();
            sh = new SpookyHash();
            sh.Update(&val, sizeof(Double));
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            for(int i = 0; i != 200; ++i)
                sh.Update((Double)i);
            h = sh.Final();
            sh = new SpookyHash();
            var arr = new Double[200];
            for(int i = 0; i != 200; ++i)
                arr[i] = (Double)i;
            sh.Update(arr);
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            sh.Update(arr, 0, 200);
            Assert.Equal(h, sh.Final());
            sh = new SpookyHash();
            sh.Update((IEnumerable<Double>)arr);
            sh = new SpookyHash();
            sh.Update(arr.Select(i => i));
        }
        [Fact]
        public void NullDoubleArrayUpdate()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentNullException>(() => hash.Update((Double[])null));
        }

        [Fact]
        public void NullDoubleArrayWithLength()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentNullException>(() => hash.Update((Double[])null, 0, 0));
        }

        [Fact]
        public void NegativeOffestDouble()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new Double[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffestDouble()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new Double[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLengthDouble()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentException>(() => hash.Update(new Double[]{default(Double)}, 0, 2));
        }

        [Fact]
        public void NegativeLengthDouble()
        {
            SpookyHash hash = new SpookyHash();
			Assert.Throws<ArgumentOutOfRangeException>(() => hash.Update(new Double[0], 0, -2));
        }
    }

    public sealed partial class HasherTests
    {
        [Fact]
        public void ArrayExtensionDouble()
        {
            var arr = new Double[200];
            for(int i = 0; i != arr.Length; ++i)
                arr[i] = (Double)i;
            var sh = new SpookyHash();
            sh.Update(arr);
            var h = sh.Final();
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr));
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr, 0, 200, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(h, unchecked(SpookyHasher.SpookyHash128(arr, 0, 200, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(h, SpookyHasher.SpookyHash128(arr, 0, 200));
            var hSlice = SpookyHasher.SpookyHash128(arr, 50, 100, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF);
            Assert.NotEqual(h, hSlice);
            Assert.Equal(hSlice, unchecked(SpookyHasher.SpookyHash128(arr, 50, 100, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            long lHash = SpookyHasher.SpookyHash64(arr, 0, 200, unchecked((long)0xDEADBEEFDEADBEEF));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr, 0, 200));
            Assert.Equal(lHash, SpookyHasher.SpookyHash64(arr));
            int hash = SpookyHasher.SpookyHash32(arr, 0, 200, unchecked((int)0xDEADBEEF));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr, unchecked((int)0xDEADBEEF)));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr, 0, 200));
            Assert.Equal(hash, SpookyHasher.SpookyHash32(arr));
            arr = null;
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 0, 200, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(HashCode128.Zero, unchecked(SpookyHasher.SpookyHash128(arr, 0, 200, (long)0xDEADBEEFDEADBEEF, (long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 0, 200));
            Assert.Equal(HashCode128.Zero, SpookyHasher.SpookyHash128(arr, 50, 100, 0xDEADBEEFDEADBEEF, 0xDEADBEEFDEADBEEF));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, 0, 200, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, unchecked((long)0xDEADBEEFDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr, 0, 200));
            Assert.Equal(0, SpookyHasher.SpookyHash64(arr));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, 0, 200, unchecked((int)0xDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, unchecked((int)0xDEADBEEF)));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr, 0, 200));
            Assert.Equal(0, SpookyHasher.SpookyHash32(arr));
        }
        
        [Fact]
        public void NegativeOffest32Double()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new Double[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest32Double()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new Double[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength32Double()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash32(new Double[]{default(Double)}, 0, 2));
        }

        [Fact]
        public void NegativeLength32Double()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash32(new Double[0], 0, -2));
        }
        
        [Fact]
        public void NegativeOffest64Double()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new Double[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest64Double()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new Double[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength64Double()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash64(new Double[]{default(Double)}, 0, 2));
        }

        [Fact]
        public void NegativeLength64Double()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash64(new Double[0], 0, -2));
        }
        
        [Fact]
        public void NegativeOffest128Double()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new Double[0], -1, 2));
        }

        [Fact]
        public void ExcessiveOffest128Double()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new Double[0], 40, 2));
        }

        [Fact]
        public void ExcessiveLength128Double()
        {
            Assert.Throws<ArgumentException>(() => SpookyHasher.SpookyHash128(new Double[]{default(Double)}, 0, 2));
        }

        [Fact]
        public void NegativeLength128Double()
        {
            Assert.Throws<ArgumentOutOfRangeException>(() => SpookyHasher.SpookyHash128(new Double[0], 0, -2));
        }
            }
}
